import tensorflow as tf
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from IPython.display import display
import pymysql
import pandas as pd
conn = pymysql.connect(host="localhost",user="root",password="",db="vomit")
 df = pd.read_sql("select * from `vomit`",con=conn)
df1=df.drop(["a1","a2","a4","a18","a28","a36","a38"], axis = 1)
df1.columns=["性別","請問您曾經照顧過術後噁心嘔吐患者之經驗嗎?","10分","100分","100分/10","10-100/10","自認嚴重需要處理(10>=100/10)","PONV(0-10)大於目標該用藥值(>3.58)","術後常見併發症-----頭暈(1)","術後常見併發症-----噁心嘔吐(1)","術後常見併發症-----傷口痛(1)","術後常見併發症-----喉嚨痛(1)","術後常見併發症-----發抖1)","術後噁心到影響日常活動，如影響正常走路或吃喝、自由下床或在床上活動，您覺得嚴重的級數為多少?","病人主訴乾嘔跟嘔吐次數"
    ,"病人主訴噁心","1. 嘔吐多少次以上?","2. 乾嘔多少次以上?","嘔吐或乾嘔","3. 噁心多少次以上?","想用藥有無Nausea(Yor N)","1.總共要多久時間以上?","2.頻率要多少以上?","age","麻醉方式","麻醉方式(全身或局部)","手術部位分類","癌症診斷","術前化療","cancer with chemotherapy","開刀時間min","DM","HTN","Gastrointestinal","Hyperlipidemia","renal_disease","是否使用OPOID類藥物(術中)","術後使用止吐藥","目標Myles_score","術後使用Opioid藥物","Modified_Myles(噁心只算有無)","病人主訴乾嘔跟嘔吐次數加病人主訴噁心(Yor N)"]
df_ready=df1.iloc[:,[0,1,6,7,8,9,10,11,12,13,20,24,25,26,27,28,29,31,32,33,34,35,36]].astype("category")
dummydata=pd.get_dummies(df_ready)
aaaal=list(dummydata.columns)
df1.to_csv("1258.csv",encoding="big5")


import tensorflow as tf
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from IPython.display import display
import pymysql
import pandas as pd
import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn import metrics
from sklearn.metrics import confusion_matrix

conn = pymysql.connect(host="localhost",user="root",password="",db="vomit")
 df = pd.read_sql("select * from `vomit`",con=conn)
df1=df.drop(["a1","a2","a4","a18","a28","a36","a38"], axis = 1)
df1.columns=["性別","請問您曾經照顧過術後噁心嘔吐患者之經驗嗎?","10分","100分","100分/10","10-100/10","自認嚴重需要處理(10>=100/10)","PONV(0-10)大於目標該用藥值(>3.58)","術後常見併發症-----頭暈(1)","術後常見併發症-----噁心嘔吐(1)","術後常見併發症-----傷口痛(1)","術後常見併發症-----喉嚨痛(1)","術後常見併發症-----發抖1)","術後噁心到影響日常活動，如影響正常走路或吃喝、自由下床或在床上活動，您覺得嚴重的級數為多少?","病人主訴乾嘔跟嘔吐次數"
    ,"病人主訴噁心","1. 嘔吐多少次以上?","2. 乾嘔多少次以上?","嘔吐或乾嘔","3. 噁心多少次以上?","想用藥有無Nausea(Yor N)","1.總共要多久時間以上?","2.頻率要多少以上?","age","麻醉方式","麻醉方式(全身或局部)","手術部位分類","癌症診斷","術前化療","cancer with chemotherapy","開刀時間min","DM","HTN","Gastrointestinal","Hyperlipidemia","renal_disease","是否使用OPOID類藥物(術中)","術後使用止吐藥","目標Myles_score","術後使用Opioid藥物","Modified_Myles(噁心只算有無)","病人主訴乾嘔跟嘔吐次數加病人主訴噁心(Yor N)"]
df_ready=df1.iloc[:,[0,1,6,7,8,9,10,11,12,13,20,24,25,26,27,28,29,31,32,33,34,35,36,37,39]].astype("category")
df_ready_con=df1.iloc[:,[2,3,4,5,14,15,16,17,18,19,21,22,23,30,38,40,41]]
dummydata=pd.get_dummies(df_ready)

res = pd.concat([dummydata, df_ready_con], axis=1)


X=res.iloc[:, :-3]#擷取變數項
Y=res.iloc[:, -2:-1] #擷取待預測項
df1.to_csv("1258.csv",encoding="big5")


import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor



tree = DecisionTreeRegressor(max_depth=2)
tree.fit(X_train,y_train)
pretree=tree.predict(X_test)
print(metrics.accuracy_score(y_test,pretree))
#準確率 = 0.9652

tree = DecisionTreeClassifier(criterion = 'gini', random_state=0)
tree.fit(X_train,y_train)
pretree=tree.predict(X_test)
print(metrics.accuracy_score(y_test,pretree))


X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=1)



from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier( n_estimators = 1000, random_state = 42, max_depth=100)
rf.fit(X_train,y_train)
y_pred = rf.predict(X_test)
a=pd.DataFrame(y_pred)
a=round(a)
print(metrics.accuracy_score(y_test,a))


importances=rf.feature_importances_
print (importances.shape)

indices=np.argsort(importances)[::-1]

for f in range(X_train.shape[1]):
    #给予10000颗决策树平均不纯度衰减的计算来评估特征重要性
    print ("%2d) %-*s %f" % (f+1,30,feat_labels[f],importances[indices[f]]) )
#可视化特征重要性-依据平均不纯度衰减
plt.title('Feature Importance-RandomForest')
plt.bar(range(X_train.shape[1]),importances[indices],color='lightblue',align='center')
plt.xticks(range(X_train.shape[1]),feat_labels,rotation=90)
plt.xlim([-1,X_train.shape[1]])
plt.tight_layout()
plt.show()

